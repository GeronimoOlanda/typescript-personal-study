{"version":3,"sources":["webpack://TypeScript/./src/A00035-Exercicio_Interfaces _e _Classes/index.ts","webpack://TypeScript/webpack/bootstrap","webpack://TypeScript/./src/A00019-Exercicio/A0019-exercicio.ts"],"names":[],"mappings":";;;;;;;;;;;;AAcA;IAKE,qBAAY,mBAAwC;QAClD,IAAI,CAAC,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,mBAAmB,CAAC,UAAU,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,mBAAmB,CAAC,UAAU,CAAC;IACnD,CAAC;IAKD,oCAAc,GAAd;QAAA,iBAUC;QATC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE;YACxC,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE;YACxC,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,KAAI,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,CAAC;YACjC,KAAI,CAAC,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gCAAU,GAAV;QACE,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,OAAO,CAAC;SACrC;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC;SACpC;IACH,CAAC;IACD,0BAAI,GAAJ;IAEA,CAAC;IACH,kBAAC;AAAD,CAAC;;AAED,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC;IAClC,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAqB;IACjE,UAAU,EAAE,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAsB;IAChE,UAAU,EAAE,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAsB;CACjE,CAAC,CAAC;AAGH,WAAW,CAAC,cAAc,EAAE,CAAC;;;;;;;UC7D7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACrBA,gIAAoD","file":"bundle.js","sourcesContent":["// setando a interface (podemos dizer que são regras) dos elementos do video player\ninterface VideoPlayerElements {\n  videoPlayer: HTMLVideoElement;\n  playButton: HTMLButtonElement;\n  stopButton: HTMLButtonElement;\n}\n//setando os metodos e protocolos que o player vai utilizar\ninterface VideoPlayerProtocol {\n  playToggle(): void; // setando como sem retorno\n  stop(): void; // setando como sem retorno\n  iniciarEventos(): void; // setando como sem retorno\n}\n\n// criando a classe e implementando a interface\nexport default class VideoPlayer implements VideoPlayerProtocol {\n  private videoPlayer: HTMLVideoElement; // aqui estamos especificando que nosso video player vai ser um Elemento de video do HTML.\n  private playButton: HTMLButtonElement; // aqui estamos especificando que nosso video player vai ser um Elemento de botao do HTML.\n  private stopButton: HTMLButtonElement; // aqui estamos especificando que nosso video player vai ser um Elemento de botao do HTML.\n\n  constructor(videoPlayerElements: VideoPlayerElements) {\n    this.videoPlayer = videoPlayerElements.videoPlayer;\n    this.playButton = videoPlayerElements.playButton;\n    this.stopButton = videoPlayerElements.stopButton;\n  }\n  // obs: em hipotese alguma utilize arrow funcion e o contexto do this inconscientemente\n  // tal ação pode acarretar em diversos bugs e quebra da aplicação.\n  // utilizamos aqui pois sabemos o que estamos fazendo e de forma simples.\n\n  iniciarEventos(): void {\n    this.playButton.addEventListener('click', () => {\n      this.playToggle(); // executando o toggle (onde esta os botoes de play e pause)\n    });\n\n    this.stopButton.addEventListener('click', () => {\n      this.videoPlayer.pause(); // evento de pause do video\n      this.videoPlayer.currentTime = 0; // zerando o player\n      this.playButton.innerText = 'Play'; // mudando o nome do botao para play assim que zerar\n    });\n  }\n\n  playToggle(): void {\n    if (this.videoPlayer.paused) {\n      this.videoPlayer.play(); // funcao propria do navegador para play\n      this.playButton.innerText = 'Pause';\n    } else {\n      this.videoPlayer.pause(); // funcao propria do navegador para pause\n      this.playButton.innerText = 'Play';\n    }\n  }\n  stop(): void {\n    //\n  }\n}\n\nconst videoplayer = new VideoPlayer({\n  videoPlayer: document.querySelector('.video') as HTMLVideoElement, // selecionando o videoplayer\n  playButton: document.querySelector('.play') as HTMLButtonElement, // selecionando o botao de play\n  stopButton: document.querySelector('.stop') as HTMLButtonElement, // selecionando o botao de pause\n});\n\n//executando o nosso metodo\nvideoplayer.iniciarEventos();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","//import './form-control';\nimport '../A00035-Exercicio_Interfaces _e _Classes';\n"],"sourceRoot":""}